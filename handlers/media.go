package handlers

import (
	"fmt"
	"log"

	"telegram-bot/database"

	"github.com/mymmrac/telego"
)

// MediaHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
type MediaHandler struct {
	db *database.Database
}

func NewMediaHandler(db *database.Database) *MediaHandler {
	return &MediaHandler{db: db}
}

// GetMediaInfo –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–µ–¥–∏–∞ –∏ file_id
func (m *MediaHandler) GetMediaInfo(msg *telego.Message) (string, string) {
	if len(msg.Photo) > 0 {
		return "photo", msg.Photo[len(msg.Photo)-1].FileID
	}
	if msg.Document != nil {
		return "document", msg.Document.FileID
	}
	if msg.Video != nil {
		return "video", msg.Video.FileID
	}
	if msg.Audio != nil {
		return "audio", msg.Audio.FileID
	}
	if msg.Voice != nil {
		return "voice", msg.Voice.FileID
	}
	if msg.Sticker != nil {
		return "sticker", msg.Sticker.FileID
	}
	if msg.VideoNote != nil {
		return "video_note", msg.VideoNote.FileID
	}
	return "text", ""
}

// ExtractMessageText –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
func (m *MediaHandler) ExtractMessageText(msg *telego.Message) string {
	if msg.Text != "" {
		return msg.Text
	}
	if msg.Caption != "" {
		return msg.Caption
	}

	switch {
	case msg.Photo != nil:
		return "üñºÔ∏è –§–æ—Ç–æ"
	case msg.Document != nil:
		return "üìÑ –î–æ–∫—É–º–µ–Ω—Ç: " + msg.Document.FileName
	case msg.Video != nil:
		return "üé• –í–∏–¥–µ–æ"
	case msg.VideoNote != nil:
		return "üìπ –ö—Ä—É–∂–æ—á–µ–∫ (–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ)"
	case msg.Audio != nil:
		title := "–ê—É–¥–∏–æ"
		if msg.Audio.Title != "" {
			title = msg.Audio.Title
		}
		return "üéµ " + title
	case msg.Voice != nil:
		return "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
	case msg.Sticker != nil:
		return "üòä –°—Ç–∏–∫–µ—Ä"
	default:
		return "üì¶ –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç"
	}
}

// SendMediaForModeration –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
func (m *MediaHandler) SendMediaForModeration(bot *telego.Bot, chatID int64, message database.Message) error {
	if message.MediaType != "text" && message.MediaFileID != "" {
		var sendErr error

		switch message.MediaType {
		case "photo":
			_, sendErr = bot.SendPhoto(&telego.SendPhotoParams{
				ChatID:  telego.ChatID{ID: chatID},
				Photo:   telego.InputFile{FileID: message.MediaFileID},
				Caption: message.MessageText,
			})
		case "document":
			_, sendErr = bot.SendDocument(&telego.SendDocumentParams{
				ChatID:   telego.ChatID{ID: chatID},
				Document: telego.InputFile{FileID: message.MediaFileID},
				Caption:  message.MessageText,
			})
		case "video":
			_, sendErr = bot.SendVideo(&telego.SendVideoParams{
				ChatID:  telego.ChatID{ID: chatID},
				Video:   telego.InputFile{FileID: message.MediaFileID},
				Caption: message.MessageText,
			})
		case "video_note":
			_, sendErr = bot.SendVideoNote(&telego.SendVideoNoteParams{
				ChatID:    telego.ChatID{ID: chatID},
				VideoNote: telego.InputFile{FileID: message.MediaFileID},
			})
		case "audio":
			_, sendErr = bot.SendAudio(&telego.SendAudioParams{
				ChatID:  telego.ChatID{ID: chatID},
				Audio:   telego.InputFile{FileID: message.MediaFileID},
				Caption: message.MessageText,
			})
		case "voice":
			_, sendErr = bot.SendVoice(&telego.SendVoiceParams{
				ChatID:  telego.ChatID{ID: chatID},
				Voice:   telego.InputFile{FileID: message.MediaFileID},
				Caption: message.MessageText,
			})
		case "sticker":
			_, sendErr = bot.SendSticker(&telego.SendStickerParams{
				ChatID:  telego.ChatID{ID: chatID},
				Sticker: telego.InputFile{FileID: message.MediaFileID},
			})
		}

		if sendErr != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: %v", sendErr)
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
			_, err := bot.SendMessage(&telego.SendMessageParams{
				ChatID: telego.ChatID{ID: chatID},
				Text:   fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ç–∏–ø: %s)\nüí¨ –û–ø–∏—Å–∞–Ω–∏–µ: %s", message.MediaType, message.MessageText),
			})
			return err
		}
	} else {
		// –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
		_, err := bot.SendMessage(&telego.SendMessageParams{
			ChatID: telego.ChatID{ID: chatID},
			Text:   fmt.Sprintf("üí¨ –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n%s", message.MessageText),
		})
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *MediaHandler) PublishMedia(bot *telego.Bot, channelID int64, message database.Message) error {
	var sendErr error

	switch message.MediaType {
	case "photo":
		_, sendErr = bot.SendPhoto(&telego.SendPhotoParams{
			ChatID:  telego.ChatID{ID: channelID},
			Photo:   telego.InputFile{FileID: message.MediaFileID},
			Caption: message.MessageText,
		})
	case "document":
		_, sendErr = bot.SendDocument(&telego.SendDocumentParams{
			ChatID:   telego.ChatID{ID: channelID},
			Document: telego.InputFile{FileID: message.MediaFileID},
			Caption:  message.MessageText,
		})
	case "video":
		_, sendErr = bot.SendVideo(&telego.SendVideoParams{
			ChatID:  telego.ChatID{ID: channelID},
			Video:   telego.InputFile{FileID: message.MediaFileID},
			Caption: message.MessageText,
		})
	case "video_note":
		_, sendErr = bot.SendVideoNote(&telego.SendVideoNoteParams{
			ChatID:    telego.ChatID{ID: channelID},
			VideoNote: telego.InputFile{FileID: message.MediaFileID},
		})
	case "audio":
		_, sendErr = bot.SendAudio(&telego.SendAudioParams{
			ChatID:  telego.ChatID{ID: channelID},
			Audio:   telego.InputFile{FileID: message.MediaFileID},
			Caption: message.MessageText,
		})
	case "voice":
		_, sendErr = bot.SendVoice(&telego.SendVoiceParams{
			ChatID:  telego.ChatID{ID: channelID},
			Voice:   telego.InputFile{FileID: message.MediaFileID},
			Caption: message.MessageText,
		})
	case "sticker":
		_, sendErr = bot.SendSticker(&telego.SendStickerParams{
			ChatID:  telego.ChatID{ID: channelID},
			Sticker: telego.InputFile{FileID: message.MediaFileID},
		})
	default: // text
		_, sendErr = bot.SendMessage(&telego.SendMessageParams{
			ChatID: telego.ChatID{ID: channelID},
			Text:   fmt.Sprintf("üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n\n%s", message.MessageText),
		})
	}

	return sendErr
}
