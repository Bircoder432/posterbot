package handlers

import (
	"fmt"
	"log"

	"telegram-bot/database"

	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
)

type ModerationHandler struct {
	db        *database.Database
	media     *MediaHandler
	channelID int64
	ownerID   int64
}

func NewModerationHandler(db *database.Database, media *MediaHandler, channelID, ownerID int64) *ModerationHandler {
	return &ModerationHandler{
		db:        db,
		media:     media,
		channelID: channelID,
		ownerID:   ownerID,
	}
}

func (m *ModerationHandler) HandleProposalsCommand(bot *telego.Bot, update telego.Update) {
	msg := update.Message
	if msg == nil {
		return
	}
	m.ShowProposals(bot, msg.Chat.ID, msg.From.ID)
}

func (m *ModerationHandler) ShowProposals(bot *telego.Bot, chatID int64, userID int64) {
	if !m.db.IsAdmin(userID) && userID != m.ownerID {
		bot.SendMessage(tu.Message(
			tu.ID(chatID),
			"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
		))
		return
	}

	messages, err := m.db.GetPendingMessages()
	if err != nil {
		bot.SendMessage(tu.Message(
			tu.ID(chatID),
			"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: "+err.Error(),
		))
		return
	}

	if len(messages) == 0 {
		bot.SendMessage(tu.Message(
			tu.ID(chatID),
			"‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
		))
		return
	}

	bot.SendMessage(tu.Message(
		tu.ID(chatID),
		fmt.Sprintf("üì® –ù–∞–π–¥–µ–Ω–æ %d –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:", len(messages)),
	))

	m.SendMessageForModeration(bot, chatID, messages[0])
}

func (m *ModerationHandler) SendMessageForModeration(bot *telego.Bot, chatID int64, message database.Message) {

	if err := m.media.SendMediaForModeration(bot, chatID, message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: %v", err)
	}

	text := fmt.Sprintf(
		"üì® –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #%d\n\n"+
			"‚è∞ –í—Ä–µ–º—è: %s\n\n"+
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		message.MessageID,
		message.CreatedAt.Format("02.01.2006 15:04"),
	)

	keyboard := tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚úÖ –û–î–û–ë–†–ò–¢–¨").WithCallbackData(fmt.Sprintf("approve_%d", message.MessageID)),
			tu.InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨").WithCallbackData(fmt.Sprintf("reject_%d", message.MessageID)),
		),
	)

	bot.SendMessage(tu.Message(
		tu.ID(chatID),
		text,
	).WithReplyMarkup(keyboard))
}

func (m *ModerationHandler) HandleCallback(bot *telego.Bot, update telego.Update) {
	callback := update.CallbackQuery
	if callback == nil {
		return
	}

	userID := callback.From.ID
	chatID := callback.Message.Chat.ID

	if !m.db.IsAdmin(userID) && userID != m.ownerID {
		bot.AnswerCallbackQuery(tu.CallbackQuery(
			callback.ID,
		).WithText("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."))
		return
	}

	data := callback.Data
	var messageID int

	if n, _ := fmt.Sscanf(data, "approve_%d", &messageID); n == 1 {
		m.HandleApprove(bot, chatID, messageID, callback)
	} else if n, _ := fmt.Sscanf(data, "reject_%d", &messageID); n == 1 {
		m.HandleReject(bot, chatID, messageID, callback)
	}
}

func (m *ModerationHandler) HandleApprove(bot *telego.Bot, chatID int64, messageID int, callback *telego.CallbackQuery) {
	message, err := m.db.GetMessageByID(messageID)
	if err != nil {
		bot.AnswerCallbackQuery(tu.CallbackQuery(
			callback.ID,
		).WithText("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"))
		return
	}

	if err := m.media.PublishMedia(bot, m.channelID, message); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: %v", err)
		bot.AnswerCallbackQuery(tu.CallbackQuery(
			callback.ID,
		).WithText("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"))
		return
	}

	m.db.UpdateMessageStatus(messageID, "approved")
	m.db.DeleteMessage(messageID)

	bot.AnswerCallbackQuery(tu.CallbackQuery(
		callback.ID,
	).WithText("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!"))

	bot.DeleteMessage(&telego.DeleteMessageParams{
		ChatID:    tu.ID(chatID),
		MessageID: callback.Message.MessageID,
	})

	m.ShowProposals(bot, chatID, callback.From.ID)
}

func (m *ModerationHandler) HandleReject(bot *telego.Bot, chatID int64, messageID int, callback *telego.CallbackQuery) {
	_, err := m.db.GetMessageByID(messageID)
	if err != nil {
		bot.AnswerCallbackQuery(tu.CallbackQuery(
			callback.ID,
		).WithText("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"))
		return
	}

	m.db.UpdateMessageStatus(messageID, "rejected")
	m.db.DeleteMessage(messageID)

	bot.AnswerCallbackQuery(tu.CallbackQuery(
		callback.ID,
	).WithText("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!"))

	bot.DeleteMessage(&telego.DeleteMessageParams{
		ChatID:    tu.ID(chatID),
		MessageID: callback.Message.MessageID,
	})

	m.ShowProposals(bot, chatID, callback.From.ID)
}
