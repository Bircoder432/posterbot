package bot

import (
	"log"

	"telegram-bot/database"
	"telegram-bot/handlers"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞
type Bot struct {
	bot        *telego.Bot
	db         *database.Database
	botHandler *th.BotHandler
	channelID  int64
	ownerID    int64
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func NewBot(token string, channelID, ownerID int64) (*Bot, error) {
	bot, err := telego.NewBot(token)
	if err != nil {
		return nil, err
	}

	db, err := database.NewDatabase()
	if err != nil {
		return nil, err
	}

	botInstance := &Bot{
		bot:       bot,
		db:        db,
		channelID: channelID,
		ownerID:   ownerID,
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	botInstance.initializeOwner()

	return botInstance, nil
}

// initializeOwner –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (b *Bot) initializeOwner() {
	if !b.db.IsAdmin(b.ownerID) {
		err := b.db.AddAdmin(b.ownerID, "vstor08")
		if err != nil {
			log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞: %v", err)
		} else {
			log.Printf("‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü %d –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", b.ownerID)
		}
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() {
	updates, err := b.bot.UpdatesViaLongPolling(nil)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
		return
	}

	botHandler, err := th.NewBotHandler(b.bot, updates)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: %v", err)
		return
	}

	b.registerHandlers(botHandler)
	b.botHandler = botHandler

	go botHandler.Start()

	log.Println("ü§ñ –ë–æ—Ç-–ø—Ä–µ–¥–ª–æ–∂–∫–∞ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –õ–°")
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Stop() {
	if b.botHandler != nil {
		b.botHandler.Stop()
	}
	b.bot.StopLongPolling()
	log.Println("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

// registerHandlers —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
func (b *Bot) registerHandlers(bh *th.BotHandler) {
	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	mediaHandler := handlers.NewMediaHandler(b.db)
	proposalsHandler := handlers.NewProposalsHandler(b.db, mediaHandler, b.channelID, b.ownerID)
	moderationHandler := handlers.NewModerationHandler(b.db, mediaHandler, b.channelID, b.ownerID)
	adminHandler := handlers.NewAdminHandler(b.db, b.ownerID)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	bh.Handle(proposalsHandler.HandleStartCommand, th.CommandEqual("start"))
	bh.Handle(moderationHandler.HandleProposalsCommand, th.CommandEqual("proposals"))
	bh.Handle(adminHandler.HandleAddAdminCommand, th.CommandEqual("addadmin"))
	bh.Handle(adminHandler.HandleListAdminsCommand, th.CommandEqual("admins"))

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
	bh.Handle(moderationHandler.HandleCallback, th.AnyCallbackQuery())

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–° –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
	bh.Handle(proposalsHandler.HandleUserProposal, th.AnyMessage())
}
